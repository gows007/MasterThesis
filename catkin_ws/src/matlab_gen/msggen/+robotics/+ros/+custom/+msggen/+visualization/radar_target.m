classdef radar_target < robotics.ros.Message
    %radar_target MATLAB implementation of visualization/radar_target
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'visualization/radar_target' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'fbd89b12a68c9a950a123efe1f1d5712' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        SeqID
        RADARhwTimeStamp
        RangeEstimate
        VelocityEstimate
        Amplitude
    end
    
    properties (Constant, Hidden)
        PropertyList = {'Amplitude', 'RADARhwTimeStamp', 'RangeEstimate', 'SeqID', 'VelocityEstimate'} % List of non-constant message properties
        ROSPropertyList = {'amplitude', 'RADARhwTimeStamp', 'rangeEstimate', 'seqID', 'velocityEstimate'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = radar_target(msg)
            %radar_target Construct the message object radar_target
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function seqid = get.SeqID(obj)
            %get.SeqID Get the value for property SeqID
            seqid = typecast(int32(obj.JavaMessage.getSeqID), 'uint32');
        end
        
        function set.SeqID(obj, seqid)
            %set.SeqID Set the value for property SeqID
            validateattributes(seqid, {'numeric'}, {'nonempty', 'scalar'}, 'radar_target', 'SeqID');
            
            obj.JavaMessage.setSeqID(seqid);
        end
        
        function radarhwtimestamp = get.RADARhwTimeStamp(obj)
            %get.RADARhwTimeStamp Get the value for property RADARhwTimeStamp
            radarhwtimestamp = typecast(int32(obj.JavaMessage.getRADARhwTimeStamp), 'uint32');
        end
        
        function set.RADARhwTimeStamp(obj, radarhwtimestamp)
            %set.RADARhwTimeStamp Set the value for property RADARhwTimeStamp
            validateattributes(radarhwtimestamp, {'numeric'}, {'nonempty', 'scalar'}, 'radar_target', 'RADARhwTimeStamp');
            
            obj.JavaMessage.setRADARhwTimeStamp(radarhwtimestamp);
        end
        
        function rangeestimate = get.RangeEstimate(obj)
            %get.RangeEstimate Get the value for property RangeEstimate
            javaArray = obj.JavaMessage.getRangeEstimate;
            array = obj.readJavaArray(javaArray, 'single');
            rangeestimate = single(array);
        end
        
        function set.RangeEstimate(obj, rangeestimate)
            %set.RangeEstimate Set the value for property RangeEstimate
            if ~isvector(rangeestimate) && isempty(rangeestimate)
                % Allow empty [] input
                rangeestimate = single.empty(0,1);
            end
            
            validateattributes(rangeestimate, {'numeric'}, {'vector'}, 'radar_target', 'RangeEstimate');
            
            javaArray = obj.JavaMessage.getRangeEstimate;
            array = obj.writeJavaArray(rangeestimate, javaArray, 'single');
            obj.JavaMessage.setRangeEstimate(array);
        end
        
        function velocityestimate = get.VelocityEstimate(obj)
            %get.VelocityEstimate Get the value for property VelocityEstimate
            javaArray = obj.JavaMessage.getVelocityEstimate;
            array = obj.readJavaArray(javaArray, 'single');
            velocityestimate = single(array);
        end
        
        function set.VelocityEstimate(obj, velocityestimate)
            %set.VelocityEstimate Set the value for property VelocityEstimate
            if ~isvector(velocityestimate) && isempty(velocityestimate)
                % Allow empty [] input
                velocityestimate = single.empty(0,1);
            end
            
            validateattributes(velocityestimate, {'numeric'}, {'vector'}, 'radar_target', 'VelocityEstimate');
            
            javaArray = obj.JavaMessage.getVelocityEstimate;
            array = obj.writeJavaArray(velocityestimate, javaArray, 'single');
            obj.JavaMessage.setVelocityEstimate(array);
        end
        
        function amplitude = get.Amplitude(obj)
            %get.Amplitude Get the value for property Amplitude
            javaArray = obj.JavaMessage.getAmplitude;
            array = obj.readJavaArray(javaArray, 'single');
            amplitude = single(array);
        end
        
        function set.Amplitude(obj, amplitude)
            %set.Amplitude Set the value for property Amplitude
            if ~isvector(amplitude) && isempty(amplitude)
                % Allow empty [] input
                amplitude = single.empty(0,1);
            end
            
            validateattributes(amplitude, {'numeric'}, {'vector'}, 'radar_target', 'Amplitude');
            
            javaArray = obj.JavaMessage.getAmplitude;
            array = obj.writeJavaArray(amplitude, javaArray, 'single');
            obj.JavaMessage.setAmplitude(array);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.SeqID = obj.SeqID;
            cpObj.RADARhwTimeStamp = obj.RADARhwTimeStamp;
            cpObj.RangeEstimate = obj.RangeEstimate;
            cpObj.VelocityEstimate = obj.VelocityEstimate;
            cpObj.Amplitude = obj.Amplitude;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.SeqID = strObj.SeqID;
            obj.RADARhwTimeStamp = strObj.RADARhwTimeStamp;
            obj.RangeEstimate = strObj.RangeEstimate;
            obj.VelocityEstimate = strObj.VelocityEstimate;
            obj.Amplitude = strObj.Amplitude;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.SeqID = obj.SeqID;
            strObj.RADARhwTimeStamp = obj.RADARhwTimeStamp;
            strObj.RangeEstimate = obj.RangeEstimate;
            strObj.VelocityEstimate = obj.VelocityEstimate;
            strObj.Amplitude = obj.Amplitude;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.visualization.radar_target.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.visualization.radar_target;
            obj.reload(strObj);
        end
    end
end
