// Generated by gencpp from file optris_drivers/TemperatureRangeRequest.msg
// DO NOT EDIT!


#ifndef OPTRIS_DRIVERS_MESSAGE_TEMPERATURERANGEREQUEST_H
#define OPTRIS_DRIVERS_MESSAGE_TEMPERATURERANGEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace optris_drivers
{
template <class ContainerAllocator>
struct TemperatureRangeRequest_
{
  typedef TemperatureRangeRequest_<ContainerAllocator> Type;

  TemperatureRangeRequest_()
    : temperatureRangeMin(0)
    , temperatureRangeMax(0)  {
    }
  TemperatureRangeRequest_(const ContainerAllocator& _alloc)
    : temperatureRangeMin(0)
    , temperatureRangeMax(0)  {
  (void)_alloc;
    }



   typedef int16_t _temperatureRangeMin_type;
  _temperatureRangeMin_type temperatureRangeMin;

   typedef int16_t _temperatureRangeMax_type;
  _temperatureRangeMax_type temperatureRangeMax;




  typedef boost::shared_ptr< ::optris_drivers::TemperatureRangeRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::optris_drivers::TemperatureRangeRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TemperatureRangeRequest_

typedef ::optris_drivers::TemperatureRangeRequest_<std::allocator<void> > TemperatureRangeRequest;

typedef boost::shared_ptr< ::optris_drivers::TemperatureRangeRequest > TemperatureRangeRequestPtr;
typedef boost::shared_ptr< ::optris_drivers::TemperatureRangeRequest const> TemperatureRangeRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::optris_drivers::TemperatureRangeRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::optris_drivers::TemperatureRangeRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace optris_drivers

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'optris_drivers': ['/home/feuerwerr/Repository/feuerwerr_ros/trunk/catkin_ws/src/optris_drivers/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::optris_drivers::TemperatureRangeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::optris_drivers::TemperatureRangeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::optris_drivers::TemperatureRangeRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::optris_drivers::TemperatureRangeRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optris_drivers::TemperatureRangeRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optris_drivers::TemperatureRangeRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::optris_drivers::TemperatureRangeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "16d7dcc9d398a75b4b07c76d6255fcff";
  }

  static const char* value(const ::optris_drivers::TemperatureRangeRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x16d7dcc9d398a75bULL;
  static const uint64_t static_value2 = 0x4b07c76d6255fcffULL;
};

template<class ContainerAllocator>
struct DataType< ::optris_drivers::TemperatureRangeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "optris_drivers/TemperatureRangeRequest";
  }

  static const char* value(const ::optris_drivers::TemperatureRangeRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::optris_drivers::TemperatureRangeRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 temperatureRangeMin\n\
int16 temperatureRangeMax\n\
";
  }

  static const char* value(const ::optris_drivers::TemperatureRangeRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::optris_drivers::TemperatureRangeRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temperatureRangeMin);
      stream.next(m.temperatureRangeMax);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TemperatureRangeRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::optris_drivers::TemperatureRangeRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::optris_drivers::TemperatureRangeRequest_<ContainerAllocator>& v)
  {
    s << indent << "temperatureRangeMin: ";
    Printer<int16_t>::stream(s, indent + "  ", v.temperatureRangeMin);
    s << indent << "temperatureRangeMax: ";
    Printer<int16_t>::stream(s, indent + "  ", v.temperatureRangeMax);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPTRIS_DRIVERS_MESSAGE_TEMPERATURERANGEREQUEST_H
