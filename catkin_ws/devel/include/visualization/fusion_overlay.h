// Generated by gencpp from file visualization/fusion_overlay.msg
// DO NOT EDIT!


#ifndef VISUALIZATION_MESSAGE_FUSION_OVERLAY_H
#define VISUALIZATION_MESSAGE_FUSION_OVERLAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace visualization
{
template <class ContainerAllocator>
struct fusion_overlay_
{
  typedef fusion_overlay_<ContainerAllocator> Type;

  fusion_overlay_()
    : seqID(0)
    , imageHwTimeStamp(0)
    , fusionPoints()
    , range()  {
    }
  fusion_overlay_(const ContainerAllocator& _alloc)
    : seqID(0)
    , imageHwTimeStamp(0)
    , fusionPoints(_alloc)
    , range(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _seqID_type;
  _seqID_type seqID;

   typedef uint32_t _imageHwTimeStamp_type;
  _imageHwTimeStamp_type imageHwTimeStamp;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _fusionPoints_type;
  _fusionPoints_type fusionPoints;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _range_type;
  _range_type range;




  typedef boost::shared_ptr< ::visualization::fusion_overlay_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::visualization::fusion_overlay_<ContainerAllocator> const> ConstPtr;

}; // struct fusion_overlay_

typedef ::visualization::fusion_overlay_<std::allocator<void> > fusion_overlay;

typedef boost::shared_ptr< ::visualization::fusion_overlay > fusion_overlayPtr;
typedef boost::shared_ptr< ::visualization::fusion_overlay const> fusion_overlayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::visualization::fusion_overlay_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::visualization::fusion_overlay_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace visualization

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'visualization': ['/home/feuerwerr/Repository/feuerwerr_ros/trunk/catkin_ws/src/visualization/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::visualization::fusion_overlay_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::visualization::fusion_overlay_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visualization::fusion_overlay_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::visualization::fusion_overlay_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visualization::fusion_overlay_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::visualization::fusion_overlay_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::visualization::fusion_overlay_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5519680eaf65b54a21dd39863066fb1";
  }

  static const char* value(const ::visualization::fusion_overlay_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5519680eaf65b54ULL;
  static const uint64_t static_value2 = 0xa21dd39863066fb1ULL;
};

template<class ContainerAllocator>
struct DataType< ::visualization::fusion_overlay_<ContainerAllocator> >
{
  static const char* value()
  {
    return "visualization/fusion_overlay";
  }

  static const char* value(const ::visualization::fusion_overlay_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::visualization::fusion_overlay_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 seqID\n\
uint32 imageHwTimeStamp\n\
float32[] fusionPoints\n\
float32[] range\n\
\n\
";
  }

  static const char* value(const ::visualization::fusion_overlay_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::visualization::fusion_overlay_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.seqID);
      stream.next(m.imageHwTimeStamp);
      stream.next(m.fusionPoints);
      stream.next(m.range);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct fusion_overlay_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::visualization::fusion_overlay_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::visualization::fusion_overlay_<ContainerAllocator>& v)
  {
    s << indent << "seqID: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seqID);
    s << indent << "imageHwTimeStamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.imageHwTimeStamp);
    s << indent << "fusionPoints[]" << std::endl;
    for (size_t i = 0; i < v.fusionPoints.size(); ++i)
    {
      s << indent << "  fusionPoints[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.fusionPoints[i]);
    }
    s << indent << "range[]" << std::endl;
    for (size_t i = 0; i < v.range.size(); ++i)
    {
      s << indent << "  range[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.range[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISUALIZATION_MESSAGE_FUSION_OVERLAY_H
