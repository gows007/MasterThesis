// Generated by gencpp from file optris_drivers/PaletteRequest.msg
// DO NOT EDIT!


#ifndef OPTRIS_DRIVERS_MESSAGE_PALETTEREQUEST_H
#define OPTRIS_DRIVERS_MESSAGE_PALETTEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace optris_drivers
{
template <class ContainerAllocator>
struct PaletteRequest_
{
  typedef PaletteRequest_<ContainerAllocator> Type;

  PaletteRequest_()
    : palette(0)
    , paletteScaling(0)
    , temperatureMin(0.0)
    , temperatureMax(0.0)  {
    }
  PaletteRequest_(const ContainerAllocator& _alloc)
    : palette(0)
    , paletteScaling(0)
    , temperatureMin(0.0)
    , temperatureMax(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _palette_type;
  _palette_type palette;

   typedef int16_t _paletteScaling_type;
  _paletteScaling_type paletteScaling;

   typedef float _temperatureMin_type;
  _temperatureMin_type temperatureMin;

   typedef float _temperatureMax_type;
  _temperatureMax_type temperatureMax;




  typedef boost::shared_ptr< ::optris_drivers::PaletteRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::optris_drivers::PaletteRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PaletteRequest_

typedef ::optris_drivers::PaletteRequest_<std::allocator<void> > PaletteRequest;

typedef boost::shared_ptr< ::optris_drivers::PaletteRequest > PaletteRequestPtr;
typedef boost::shared_ptr< ::optris_drivers::PaletteRequest const> PaletteRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::optris_drivers::PaletteRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::optris_drivers::PaletteRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace optris_drivers

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'optris_drivers': ['/home/feuerwerr/Repository/feuerwerr_ros/trunk/catkin_ws/src/optris_drivers/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::optris_drivers::PaletteRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::optris_drivers::PaletteRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::optris_drivers::PaletteRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::optris_drivers::PaletteRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optris_drivers::PaletteRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::optris_drivers::PaletteRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::optris_drivers::PaletteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f28136ebeed4771c7945cbcc0527c8c0";
  }

  static const char* value(const ::optris_drivers::PaletteRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf28136ebeed4771cULL;
  static const uint64_t static_value2 = 0x7945cbcc0527c8c0ULL;
};

template<class ContainerAllocator>
struct DataType< ::optris_drivers::PaletteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "optris_drivers/PaletteRequest";
  }

  static const char* value(const ::optris_drivers::PaletteRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::optris_drivers::PaletteRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 palette\n\
int16 paletteScaling\n\
float32 temperatureMin\n\
float32 temperatureMax\n\
";
  }

  static const char* value(const ::optris_drivers::PaletteRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::optris_drivers::PaletteRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.palette);
      stream.next(m.paletteScaling);
      stream.next(m.temperatureMin);
      stream.next(m.temperatureMax);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PaletteRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::optris_drivers::PaletteRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::optris_drivers::PaletteRequest_<ContainerAllocator>& v)
  {
    s << indent << "palette: ";
    Printer<int16_t>::stream(s, indent + "  ", v.palette);
    s << indent << "paletteScaling: ";
    Printer<int16_t>::stream(s, indent + "  ", v.paletteScaling);
    s << indent << "temperatureMin: ";
    Printer<float>::stream(s, indent + "  ", v.temperatureMin);
    s << indent << "temperatureMax: ";
    Printer<float>::stream(s, indent + "  ", v.temperatureMax);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPTRIS_DRIVERS_MESSAGE_PALETTEREQUEST_H
